%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sat Jul  2 11:43:13 2016
%%Title: /home/bert/workspace/git/gnucap-examples/003/eg3.sch
%%Author: bert
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
gsave
0 0 17000 0 10 line
17000 0 17000 11000 10 line
17000 11000 0 11000 10 line
0 11000 0 0 10 line
12900 600 12900 0 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 9500 400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 13000 400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 13000 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 9500 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 11200 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 9500 700 144.444443 text
grestore
9400 0 17000 0 10 line
17000 0 17000 1400 10 line
17000 1400 9400 1400 10 line
9400 1400 9400 0 10 line
9400 600 17000 600 10 line
grestore
gsave
false false false false 260.000000 [(GNUCAP tutorial schematic) ] 0 10000 700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Bert Timmerman) ] 0 14000 100 180.555557 text
grestore
gsave
false false false false 260.000000 [(20160702) ] 0 14000 400 180.555557 text
grestore
gsave
false false false false 260.000000 [(eg3.sch) ] 0 10100 400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 10100 100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 11600 100 180.555557 text
grestore
gsave
9800 8700 11800 8700 10 line
11800 8700 11800 9000 10 line
11800 9000 9800 9000 10 line
9800 9000 9800 8700 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 8800 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A2) ] 0 9900 8800 180.555557 text
grestore
gsave
false false false false 260.000000 [(.dc > eg3.dat) ] 0 9900 8500 180.555557 text
grestore
gsave
9800 9500 11800 9500 10 line
11800 9500 11800 9800 10 line
11800 9800 9800 9800 10 line
9800 9800 9800 9500 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 9600 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A1) ] 0 9900 9600 180.555557 text
grestore
gsave
false false false false 260.000000 [(.print dc v\(2\) z\(2\)) ] 0 9900 9300 180.555557 text
grestore
1000 3400 1000 3900 10 line
gsave
false false false false 260.000000 [(0) ] 0 800 3500 180.555557 text
grestore
gsave
1000 3200 1000 3400 10 line
900 3200 1100 3200 10 line
955 3150 1045 3150 10 line
980 3110 1020 3110 10 line
grestore
gsave
3100 8000 3100 7850 10 line
3100 7100 3100 7250 10 line
3000 7250 3200 7250 10 line
3200 7250 3200 7850 10 line
3200 7850 3000 7850 10 line
3000 7850 3000 7250 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 90 2900 7300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1e4) ] 90 3400 7300 180.555557 text
grestore
gsave
5600 8000 5600 7850 10 line
5600 7100 5600 7250 10 line
5500 7250 5700 7250 10 line
5700 7250 5700 7850 10 line
5700 7850 5500 7850 10 line
5500 7850 5500 7250 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 90 5400 7300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 90 5900 7300 180.555557 text
grestore
gsave
2600 4900 2600 4750 10 line
2600 4000 2600 4150 10 line
2500 4150 2700 4150 10 line
2700 4150 2700 4750 10 line
2700 4750 2500 4750 10 line
2500 4750 2500 4150 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 90 2400 4200 180.555557 text
grestore
gsave
false false false false 260.000000 [(330) ] 90 2900 4200 180.555557 text
grestore
gsave
2100 5800 1950 5800 10 line
1200 5800 1350 5800 10 line
1350 5700 1950 5700 10 line
1950 5700 1950 5900 10 line
1950 5900 1350 5900 10 line
1350 5900 1350 5700 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 0 1400 6000 180.555557 text
grestore
gsave
false false false false 260.000000 [(470) ] 0 1400 5500 180.555557 text
grestore
gsave
2300 7500 2150 7500 10 line
1400 7500 1550 7500 10 line
1550 7400 2150 7400 10 line
2150 7400 2150 7600 10 line
2150 7600 1550 7600 10 line
1550 7600 1550 7400 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 0 1600 7700 180.555557 text
grestore
gsave
false false false false 260.000000 [(2.2) ] 0 1600 7200 180.555557 text
grestore
gsave
6400 5400 6600 5200 10 line
6600 5200 6400 5000 10 line
6200 5200 6400 5000 10 line
6200 5200 6400 5400 10 line
6400 5400 6400 5500 10 line
6400 5500 6100 5500 10 line
6100 4900 6400 4900 10 line
6400 5000 6400 4900 10 line
6100 4800 6100 5600 10 line
6900 5500 6900 4900 10 line
6900 4900 7200 4900 10 line
7200 5500 6900 5500 10 line
7200 5600 7200 4800 10 line
7200 5600 6100 5600 10 line
6100 4800 7200 4800 10 line
6400 5000 6400 5400 10 line
6900 5000 6850 5125 10 line
6900 5000 6950 5125 10 line
7200 5500 7400 5500 10 line
7200 4900 7400 4900 10 line
6100 4900 5900 4900 10 line
6100 5500 5900 5500 10 line
gsave
false true false false 260.000000 [(+) ] 0 6500 5400 180.555557 text
grestore
gsave
false true false false 260.000000 [(-) ] 0 6500 4900 180.555557 text
grestore
grestore
gsave
false true false false 260.000000 [(H1) ] 0 6800 5650 180.555557 text
grestore
gsave
true false false true 260.000000 [(value=1) ] 0 6600 4750 180.555557 text
grestore
gsave
3700 4700 3900 4500 10 line
3900 4500 3700 4300 10 line
3500 4500 3700 4300 10 line
3500 4500 3700 4700 10 line
3700 4700 3700 4800 10 line
3700 4800 3400 4800 10 line
3400 4200 3700 4200 10 line
3700 4300 3700 4200 10 line
3400 4800 3200 4800 10 line
3400 4200 3200 4200 10 line
3400 4100 3400 4900 10 line
4200 4200 4500 4200 10 line
4500 4800 4200 4800 10 line
4500 4900 4500 4100 10 line
4500 4900 3400 4900 10 line
3400 4100 4500 4100 10 line
4500 4800 4700 4800 10 line
4700 4200 4500 4200 10 line
3900 4500 3500 4500 10 line
3950 4300 4000 4450 10 line
3900 4450 3950 4300 10 line
3950 4725 3950 4300 10 line
gsave
false true false false 260.000000 [(+) ] 0 4200 4700 180.555557 text
grestore
gsave
false true false false 260.000000 [(-) ] 0 4200 4200 180.555557 text
grestore
grestore
gsave
false true false false 260.000000 [(G1) ] 0 4100 4950 180.555557 text
grestore
gsave
true false false true 260.000000 [(value=1.3) ] 0 4000 4050 180.555557 text
grestore
gsave
3900 9400 4100 9200 10 line
4100 9200 3900 9000 10 line
3700 9200 3900 9000 10 line
3700 9200 3900 9400 10 line
3900 9400 3900 9500 10 line
3900 9500 3600 9500 10 line
3600 8900 3900 8900 10 line
3900 9000 3900 8900 10 line
3600 9500 3400 9500 10 line
3600 8900 3400 8900 10 line
3600 8800 3600 9600 10 line
4400 9500 4400 8900 10 line
4400 8900 4700 8900 10 line
4700 9500 4400 9500 10 line
4700 9600 4700 8800 10 line
4700 9600 3600 9600 10 line
3600 8800 4700 8800 10 line
4700 9500 4900 9500 10 line
4900 8900 4700 8900 10 line
4100 9200 3700 9200 10 line
4400 9000 4450 9150 10 line
4400 9000 4350 9150 10 line
4150 9425 4150 9000 10 line
4150 9000 4200 9150 10 line
4150 9000 4100 9150 10 line
grestore
gsave
false true false false 260.000000 [(F1) ] 0 4300 9650 180.555557 text
grestore
gsave
true false false true 260.000000 [(value=1) ] 0 4200 8750 180.555557 text
grestore
gsave
3800 6300 4000 6100 10 line
4000 6100 3800 5900 10 line
3600 6100 3800 5900 10 line
3600 6100 3800 6300 10 line
3800 6300 3800 6400 10 line
3800 6400 3500 6400 10 line
3500 5800 3800 5800 10 line
3800 5900 3800 5800 10 line
3500 6400 3300 6400 10 line
3500 5800 3300 5800 10 line
3500 5700 3500 6500 10 line
4300 5800 4600 5800 10 line
4600 6400 4300 6400 10 line
4600 6500 4600 5700 10 line
4600 6500 3500 6500 10 line
3500 5700 4600 5700 10 line
4600 6400 4800 6400 10 line
4800 5800 4600 5800 10 line
3800 6300 3800 5900 10 line
gsave
false true false false 260.000000 [(+) ] 0 3900 6300 180.555557 text
grestore
gsave
false true false false 260.000000 [(-) ] 0 3900 5800 180.555557 text
grestore
gsave
false true false false 260.000000 [(+) ] 0 4300 6300 180.555557 text
grestore
gsave
false true false false 260.000000 [(-) ] 0 4300 5800 180.555557 text
grestore
grestore
gsave
false true false false 260.000000 [(E1) ] 0 4200 6550 180.555557 text
grestore
gsave
true false false true 260.000000 [(value=0.4) ] 0 4100 5650 180.555557 text
grestore
gsave
1000 5100 1000 4800 10 line
gsave
false true false false 208.000000 [(1) ] 0 950 4900 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 1000 4750 144.444443 text
grestore
1000 3900 1000 4200 10 line
gsave
false true false false 208.000000 [(2) ] 0 950 4000 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 1000 4250 144.444443 text
grestore
1000 4500 300 0 360 10 darc
1125 4525 875 4525 10 line
1125 4475 875 4475 10 line
grestore
gsave
false false false true 260.000000 [(V1) ] 0 1400 4450 180.555557 text
grestore
gsave
false false false true 260.000000 [(DC 5V) ] 0 1400 4650 180.555557 text
grestore
gsave
1000 6100 1000 6400 10 line
gsave
false false false true 208.000000 [(1) ] 0 1050 6300 144.444443 text
grestore
gsave
true false false false 208.000000 [(+) ] 0 1000 6450 144.444443 text
grestore
1000 7300 1000 7000 10 line
gsave
false false false true 208.000000 [(2) ] 0 1050 7200 144.444443 text
grestore
gsave
true false false true 208.000000 [(-) ] 0 1000 6950 144.444443 text
grestore
1000 6700 300 0 360 10 darc
875 6675 1125 6675 10 line
875 6725 1125 6725 10 line
grestore
gsave
false false false true 260.000000 [(I1) ] 0 1400 6650 180.555557 text
grestore
gsave
false false false true 260.000000 [(DC 2mA) ] 0 1400 6850 180.555557 text
grestore
1000 7300 1000 7500 10 line
1000 5800 1200 5800 10 line
1000 5100 1000 6100 10 line
gsave
false false false false 260.000000 [(1) ] 0 800 5800 180.555557 text
grestore
2100 5800 3300 5800 10 line
gsave
false false false false 260.000000 [(2) ] 0 2400 5900 180.555557 text
grestore
400 7500 1400 7500 10 line
gsave
false false false false 260.000000 [(4) ] 0 1100 7600 180.555557 text
grestore
2300 7500 2500 7500 10 line
2500 6400 3300 6400 10 line
gsave
false false false false 260.000000 [(5) ] 0 2700 6500 180.555557 text
grestore
5200 6400 5200 5300 10 line
1000 5300 5700 5300 10 line
2500 6400 2500 9500 10 line
2500 9500 3400 9500 10 line
3400 8900 3100 8900 10 line
3100 8400 8400 8400 10 line
gsave
false false false false 260.000000 [(6) ] 0 5000 8500 180.555557 text
grestore
5000 5800 5000 5500 10 line
5000 5500 5900 5500 10 line
5900 4900 5200 4900 10 line
5200 4900 5200 3700 10 line
5200 3700 1000 3700 10 line
2600 4900 2600 5800 10 line
2600 4000 2600 3700 10 line
5600 8000 5600 8400 10 line
5600 7100 5600 5500 10 line
4800 5800 5000 5800 10 line
gsave
false false false false 260.000000 [(3) ] 0 4900 5900 180.555557 text
grestore
3100 8000 3100 8900 10 line
3100 7100 3100 6400 10 line
9400 1400 17000 1400 10 line
17000 1400 17000 11000 10 line
17000 11000 9400 11000 10 line
9400 11000 9400 1400 10 line
4900 9500 5300 9500 10 line
gsave
false false false false 260.000000 [(R1) ] 0 5000 9600 180.555557 text
grestore
4900 8900 5300 8900 10 line
gsave
false false false false 260.000000 [(3e-2) ] 0 5000 9000 180.555557 text
grestore
2600 5100 3000 5100 10 line
3000 5100 3000 4800 10 line
3000 4800 3200 4800 10 line
5400 5500 5400 3400 10 line
5400 3400 3000 3400 10 line
3000 3400 3000 4200 10 line
3000 4200 3200 4200 10 line
4700 4200 8400 4200 10 line
8400 4200 8400 8400 10 line
4700 4800 4900 4800 10 line
gsave
false false false false 260.000000 [(4) ] 0 4800 4900 180.555557 text
grestore
7400 5500 7700 5500 10 line
gsave
false false false false 260.000000 [(R3) ] 0 7500 5600 180.555557 text
grestore
7400 4900 7700 4900 10 line
7700 4900 7700 4500 10 line
7700 4500 5700 4500 10 line
5700 4500 5700 5300 10 line
4900 4800 4900 2500 10 line
4900 2500 400 2500 10 line
400 2500 400 7500 10 line
gsave
9800 10300 11800 10300 10 line
11800 10300 11800 10600 10 line
11800 10600 9800 10600 10 line
9800 10600 9800 10300 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 10400 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A0) ] 0 9900 10400 180.555557 text
grestore
gsave
false false false false 260.000000 [(.title eg3.ckt) ] 0 9900 10100 180.555557 text
grestore
5200 6400 4800 6400 10 line
newpath
1000 3700
25
0 360 arc
fill
newpath
1000 7500
25
0 360 arc
fill
newpath
1000 7500
25
0 360 arc
fill
newpath
1000 5800
25
0 360 arc
fill
newpath
1000 5800
25
0 360 arc
fill
newpath
1000 5800
25
0 360 arc
fill
newpath
1000 5300
25
0 360 arc
fill
newpath
2600 5800
25
0 360 arc
fill
newpath
1000 7500
25
0 360 arc
fill
newpath
2500 7500
25
0 360 arc
fill
newpath
2500 7500
25
0 360 arc
fill
newpath
3100 6400
25
0 360 arc
fill
newpath
5200 5300
25
0 360 arc
fill
newpath
5200 5300
25
0 360 arc
fill
newpath
1000 5300
25
0 360 arc
fill
newpath
1000 5300
25
0 360 arc
fill
newpath
5200 5300
25
0 360 arc
fill
newpath
2500 7500
25
0 360 arc
fill
newpath
3100 8400
25
0 360 arc
fill
newpath
5600 8400
25
0 360 arc
fill
newpath
3100 8400
25
0 360 arc
fill
newpath
5600 5500
25
0 360 arc
fill
newpath
5400 5500
25
0 360 arc
fill
newpath
1000 3700
25
0 360 arc
fill
newpath
1000 3700
25
0 360 arc
fill
newpath
2600 3700
25
0 360 arc
fill
newpath
2600 5800
25
0 360 arc
fill
newpath
2600 5800
25
0 360 arc
fill
newpath
2600 5100
25
0 360 arc
fill
newpath
2600 3700
25
0 360 arc
fill
newpath
2600 3700
25
0 360 arc
fill
newpath
5600 8400
25
0 360 arc
fill
newpath
5600 8400
25
0 360 arc
fill
newpath
5600 5500
25
0 360 arc
fill
newpath
5600 5500
25
0 360 arc
fill
newpath
3100 8400
25
0 360 arc
fill
newpath
3100 6400
25
0 360 arc
fill
newpath
3100 6400
25
0 360 arc
fill
60 60 5270 9470 fbox
60 60 5270 8870 fbox
newpath
2600 5100
25
0 360 arc
fill
newpath
2600 5100
25
0 360 arc
fill
newpath
5400 5500
25
0 360 arc
fill
newpath
5400 5500
25
0 360 arc
fill
60 60 7670 5470 fbox
showpage
%%End
