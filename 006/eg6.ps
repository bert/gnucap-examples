%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sun Jul 17 11:20:04 2016
%%Title: /home/bert/workspace/git/gnucap-examples/006/eg6.sch
%%Author: bert
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
gsave
0 0 17000 0 10 line
17000 0 17000 11000 10 line
17000 11000 0 11000 10 line
0 11000 0 0 10 line
12900 600 12900 0 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 9500 400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 13000 400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 13000 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 9500 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 11200 100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 9500 700 144.444443 text
grestore
9400 0 17000 0 10 line
17000 0 17000 1400 10 line
17000 1400 9400 1400 10 line
9400 1400 9400 0 10 line
9400 600 17000 600 10 line
grestore
gsave
false false false false 260.000000 [(GNUCAP tutorial schematic) ] 0 10000 700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Bert Timmerman) ] 0 14000 100 180.555557 text
grestore
gsave
false false false false 260.000000 [(20160717) ] 0 14000 400 180.555557 text
grestore
gsave
false false false false 260.000000 [(eg6.sch) ] 0 10100 400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 10100 100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 11600 100 180.555557 text
grestore
gsave
9800 8200 11800 8200 10 line
11800 8200 11800 8500 10 line
11800 8500 9800 8500 10 line
9800 8500 9800 8200 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 8300 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A3) ] 0 9900 8300 180.555557 text
grestore
gsave
false false false false 260.000000 [(.dc Vcc 0 5 0.5 > eg6.dat) ] 0 9900 8000 180.555557 text
grestore
gsave
9800 8900 11800 8900 10 line
11800 8900 11800 9200 10 line
11800 9200 9800 9200 10 line
9800 9200 9800 8900 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 9000 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A2) ] 0 9900 9000 180.555557 text
grestore
gsave
false false false false 260.000000 [(.print dc v\(2\) v\(3\) v\(4\)) ] 0 9900 8700 180.555557 text
grestore
gsave
7400 6100 7400 6250 10 line
7400 7000 7400 6850 10 line
7300 6250 7500 6250 10 line
7500 6250 7500 6850 10 line
7500 6850 7300 6850 10 line
7300 6850 7300 6250 10 line
grestore
gsave
false false false false 260.000000 [(Rd3) ] 90 7200 6300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 90 7700 6300 180.555557 text
grestore
gsave
5700 6100 5700 6250 10 line
5700 7000 5700 6850 10 line
5600 6250 5800 6250 10 line
5800 6250 5800 6850 10 line
5800 6850 5600 6850 10 line
5600 6850 5600 6250 10 line
grestore
gsave
false false false false 260.000000 [(Rd2) ] 90 5500 6300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 90 6000 6300 180.555557 text
grestore
gsave
4000 6100 4000 6250 10 line
4000 7000 4000 6850 10 line
3900 6250 4100 6250 10 line
4100 6250 4100 6850 10 line
4100 6850 3900 6850 10 line
3900 6850 3900 6250 10 line
grestore
gsave
false false false false 260.000000 [(Rd1) ] 90 3800 6300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 90 4300 6300 180.555557 text
grestore
gsave
6400 7600 6400 7200 10 line
6400 7600 6700 7400 10 line
6700 7400 6400 7200 10 line
6700 7600 6700 7200 10 line
6100 7400 6300 7400 10 line
7000 7400 6800 7400 10 line
6800 7400 6700 7400 10 line
6400 7400 6300 7400 10 line
grestore
gsave
false false false false 260.000000 [(Dz) ] 0 6400 7700 180.555557 text
grestore
gsave
false false false false 260.000000 [(1N4148) ] 0 6300 7000 180.555557 text
grestore
gsave
4700 7600 4700 7200 10 line
4700 7600 5000 7400 10 line
5000 7400 4700 7200 10 line
5000 7600 5000 7200 10 line
4400 7400 4600 7400 10 line
5300 7400 5100 7400 10 line
5100 7400 5000 7400 10 line
4700 7400 4600 7400 10 line
grestore
gsave
false false false false 260.000000 [(Dy) ] 0 4700 7700 180.555557 text
grestore
gsave
false false false false 260.000000 [(1N4148) ] 0 4600 7000 180.555557 text
grestore
gsave
3000 7600 3000 7200 10 line
3000 7600 3300 7400 10 line
3300 7400 3000 7200 10 line
3300 7600 3300 7200 10 line
2700 7400 2900 7400 10 line
3600 7400 3400 7400 10 line
3400 7400 3300 7400 10 line
3000 7400 2900 7400 10 line
grestore
gsave
false false false false 260.000000 [(Dx) ] 0 3000 7700 180.555557 text
grestore
gsave
false false false false 260.000000 [(1N4148) ] 0 2900 7000 180.555557 text
grestore
gsave
2300 7100 2300 6800 10 line
gsave
false false false false 208.000000 [(1) ] 0 2350 6900 144.444443 text
grestore
gsave
true false false true 208.000000 [(+) ] 0 2300 6750 144.444443 text
grestore
2300 5900 2300 6200 10 line
gsave
false false false false 208.000000 [(2) ] 0 2350 6000 144.444443 text
grestore
gsave
true false false false 208.000000 [(-) ] 0 2300 6250 144.444443 text
grestore
2300 6500 300 0 360 10 darc
2175 6525 2425 6525 10 line
2175 6475 2425 6475 10 line
grestore
gsave
false false false false 260.000000 [(Vcc) ] 0 2700 6550 180.555557 text
grestore
gsave
false false false false 260.000000 [(5) ] 0 2700 6350 180.555557 text
grestore
gsave
2300 5200 2300 5400 10 line
2200 5200 2400 5200 10 line
2255 5150 2345 5150 10 line
2280 5110 2320 5110 10 line
grestore
2300 5400 2300 5900 10 line
gsave
false false false false 260.000000 [(0) ] 0 2100 5700 180.555557 text
grestore
2300 7100 2300 7400 10 line
gsave
false false false false 260.000000 [(1) ] 0 2100 7400 180.555557 text
grestore
7400 5700 2300 5700 10 line
4000 7000 4000 7400 10 line
4000 6100 4000 5700 10 line
2700 7400 2300 7400 10 line
3600 7400 4400 7400 10 line
gsave
false false false false 260.000000 [(2) ] 0 3900 7500 180.555557 text
grestore
5700 7000 5700 7400 10 line
5700 6100 5700 5700 10 line
5300 7400 6100 7400 10 line
gsave
false false false false 260.000000 [(3) ] 0 5600 7500 180.555557 text
grestore
7400 7000 7400 7400 10 line
7400 6100 7400 5700 10 line
7000 7400 7400 7400 10 line
gsave
false false false false 260.000000 [(4) ] 0 7300 7500 180.555557 text
grestore
9400 1400 17000 1400 10 line
17000 1400 17000 11000 10 line
17000 11000 9400 11000 10 line
9400 11000 9400 1400 10 line
gsave
false false false false 260.000000 [(V\(2\)) ] 0 4300 8000 180.555557 text
grestore
gsave
false false false false 260.000000 [(V\(3\)) ] 0 6000 8000 180.555557 text
grestore
gsave
false false false false 260.000000 [(V\(4\)) ] 0 7700 8000 180.555557 text
grestore
4000 7400 4200 7900 10 line
4200 7900 4700 7900 10 line
4700 7900 4700 8200 10 line
4700 8200 4200 8200 10 line
4200 8200 4200 7900 10 line
5700 7400 5900 7900 10 line
5900 7900 6400 7900 10 line
6400 7900 6400 8200 10 line
6400 8200 5900 8200 10 line
5900 8200 5900 7900 10 line
7400 7400 7600 7900 10 line
7600 7900 8100 7900 10 line
8100 7900 8100 8200 10 line
8100 8200 7600 8200 10 line
7600 8200 7600 7900 10 line
gsave
9800 9600 11800 9600 10 line
11800 9600 11800 9900 10 line
11800 9900 9800 9900 10 line
9800 9900 9800 9600 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 9700 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A1) ] 0 9900 9700 180.555557 text
grestore
gsave
false false false false 260.000000 [(.model 1N4148 D IS=2e-14) ] 0 9900 9400 180.555557 text
grestore
gsave
9800 10300 11800 10300 10 line
11800 10300 11800 10600 10 line
11800 10600 9800 10600 10 line
9800 10600 9800 10300 10 line
gsave
false false false false 260.000000 [(SPICE directive) ] 0 10400 10400 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(A0) ] 0 9900 10400 180.555557 text
grestore
gsave
false false false false 260.000000 [(.title eg6.ckt) ] 0 9900 10100 180.555557 text
grestore
newpath
2300 5700
25
0 360 arc
fill
newpath
2300 5700
25
0 360 arc
fill
newpath
2300 5700
25
0 360 arc
fill
newpath
4000 5700
25
0 360 arc
fill
newpath
5700 5700
25
0 360 arc
fill
newpath
4000 7400
25
0 360 arc
fill
newpath
4000 7400
25
0 360 arc
fill
newpath
4000 5700
25
0 360 arc
fill
newpath
4000 5700
25
0 360 arc
fill
newpath
4000 7400
25
0 360 arc
fill
newpath
5700 7400
25
0 360 arc
fill
newpath
5700 7400
25
0 360 arc
fill
newpath
5700 5700
25
0 360 arc
fill
newpath
5700 5700
25
0 360 arc
fill
newpath
5700 7400
25
0 360 arc
fill
showpage
%%End
